Tool name: compare-by-country

Goal:
Compare conversion performance by user country across two time periods. This tool helps identify regions where conversion behavior has changed, which may indicate localization issues, geo-based outages, or traffic drops from specific markets.

🧮 Formula:
For each `country`:
- conversion_rate = conversions / unique_visitors
- rate_delta = current_conversion_rate - previous_conversion_rate
- percent_change = (rate_delta / previous_conversion_rate) * 100

🧱 Required Tables:
- `event`: contains tracked events (including conversion)
- `session`: includes visitor ID and country (via IP lookup or geo column)
- `website`: used to filter by site ID

⚙️ Input Parameters:
```json
{
  "websiteId": "string",           // UUID of the website
  "conversionEvent": "string",     // e.g. "signup", "purchase"
  "currentFrom": "YYYY-MM-DD",     // Start of current period
  "currentTo": "YYYY-MM-DD",       // End of current period
  "previousFrom": "YYYY-MM-DD",    // Start of previous period
  "previousTo": "YYYY-MM-DD",      // End of previous period
  "minVisitors": 5                 // Optional: skip low-volume countries
}

Output Schema:

[
  {
    "country": string,
    "current": {
      "conversions": number,
      "uniqueVisitors": number,
      "conversionRate": number
    },
    "previous": {
      "conversions": number,
      "uniqueVisitors": number,
      "conversionRate": number
    },
    "change": {
      "rateDelta": number,
      "percentChange": number,
      "direction": "increase" | "decrease" | "no_change"
    }
  },
  ...
]


🧠 SQL Query (Database-Agnostic):
Assumes that country information is tracked in session.country.

-- Current period
SELECT
  s.country AS country,
  COUNT(DISTINCT e.session_id) AS conversions,
  COUNT(DISTINCT s.visitor_id) AS unique_visitors,
  'current' AS period
FROM event e
JOIN session s ON e.session_id = s.session_id
WHERE e.website_id = {{websiteId}}
  AND e.event_name = {{conversionEvent}}
  AND e.created_at BETWEEN {{currentFrom}} AND {{currentTo}}
GROUP BY s.country

UNION ALL

-- Previous period
SELECT
  s.country AS country,
  COUNT(DISTINCT e.session_id) AS conversions,
  COUNT(DISTINCT s.visitor_id) AS unique_visitors,
  'previous' AS period
FROM event e
JOIN session s ON e.session_id = s.session_id
WHERE e.website_id = {{websiteId}}
  AND e.event_name = {{conversionEvent}}
  AND e.created_at BETWEEN {{previousFrom}} AND {{previousTo}}
GROUP BY s.country


🧠 Post-processing Logic (Pseudocode):

group results by `country`

for each country:
  current_rate = current_conversions / current_visitors
  previous_rate = previous_conversions / previous_visitors
  delta = current_rate - previous_rate
  percent_change = (delta / previous_rate) * 100

  direction = "increase" if percent_change > 0.5
              "decrease" if percent_change < -0.5
              "no_change" otherwise


💡 Notes for Cursor:

The tool helps identify geographic performance shifts

Consider mapping missing or null countries to "Unknown"

Use minVisitors to filter out statistically insignificant rows

Final output can be sorted by impact (rateDelta or percentChange)

Query syntax must work with both PostgreSQL and ClickHouse