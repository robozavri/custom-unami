Tool name: compare-by-path

Goal:
Compare conversion performance by page path between two time periods. For each path, calculate conversion count, unique visitors, and conversion rate. Determine significant increases or decreases per path, sorted by impact.

🧮 Formula:
For each `path`:
- conversion_rate = conversions / unique_visitors
- rate_delta = current_conversion_rate - previous_conversion_rate
- percent_change = (rate_delta / previous_conversion_rate) * 100

🧱 Required Tables:
- `event`: contains all custom events including conversions
- `session`: contains session metadata like visitor ID
- `pageview`: links session and URL path (or optionally embedded in session table depending on schema)

⚙️ Input Parameters:
```json
{
  "websiteId": "string",           // UUID of the website
  "conversionEvent": "string",     // Name of the conversion event (e.g. "signup")
  "currentFrom": "YYYY-MM-DD",     // Start of current period
  "currentTo": "YYYY-MM-DD",       // End of current period
  "previousFrom": "YYYY-MM-DD",    // Start of previous period
  "previousTo": "YYYY-MM-DD",      // End of previous period
  "minVisitors": 5                 // Optional: filter paths with very low visitors
}


Output Schema:

[
  {
    "path": string,
    "current": {
      "conversions": number,
      "uniqueVisitors": number,
      "conversionRate": number
    },
    "previous": {
      "conversions": number,
      "uniqueVisitors": number,
      "conversionRate": number
    },
    "change": {
      "rateDelta": number,
      "percentChange": number,
      "direction": "increase" | "decrease" | "no_change"
    }
  },
  ...
]


🧠 SQL Query (Database Agnostic Example):
This example assumes you track url_path or similar in your schema (e.g., pageview or directly in event or session).

-- Current period
SELECT
  p.url_path AS path,
  COUNT(DISTINCT e.session_id) AS conversions,
  COUNT(DISTINCT s.visitor_id) AS unique_visitors,
  'current' AS period
FROM event e
JOIN session s ON e.session_id = s.session_id
JOIN pageview p ON s.session_id = p.session_id
WHERE e.website_id = {{websiteId}}
  AND e.event_name = {{conversionEvent}}
  AND e.created_at BETWEEN {{currentFrom}} AND {{currentTo}}
GROUP BY p.url_path

UNION ALL

-- Previous period
SELECT
  p.url_path AS path,
  COUNT(DISTINCT e.session_id) AS conversions,
  COUNT(DISTINCT s.visitor_id) AS unique_visitors,
  'previous' AS period
FROM event e
JOIN session s ON e.session_id = s.session_id
JOIN pageview p ON s.session_id = p.session_id
WHERE e.website_id = {{websiteId}}
  AND e.event_name = {{conversionEvent}}
  AND e.created_at BETWEEN {{previousFrom}} AND {{previousTo}}
GROUP BY p.url_path


🧠 Post-processing Logic (Pseudocode):

group results by `path`

for each path:
  conversionRate_now = conversions_now / visitors_now
  conversionRate_prev = conversions_prev / visitors_prev
  delta = conversionRate_now - conversionRate_prev
  percentChange = (delta / conversionRate_prev) * 100

  direction = "increase" if percentChange > 0.5
              "decrease" if percentChange < -0.5
              "no_change" otherwise


💡 Notes for Cursor:

This tool surfaces paths where user conversion behavior has shifted

Consider using fuzzy grouping if exact url_path strings vary too much (optional future improvement)

This tool is ideal for diagnosing changes to landing page performance

Results may be consumed by summarizers, dashboards, or insights

Only use SQL features that are compatible with both PostgreSQL and ClickHouse